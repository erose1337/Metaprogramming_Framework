Currently working on:

- Form Editor
    - Form Options
        - form for all items in interface
    - Row Editor
        - Row Options
            - form for all items in interface
    - Field Editor
        - Field Options
            - form for all items in interface
        - Entry Editor
            - form for all items in interface



To Do/Bugs
=====

- if some object is not clickable, should that apply to children?
    - current behavior does not do so
        - must set both parent and child `clickable` flags to False

- documentation for Forms and Tabs

- Lockscreen needs register button sorted out
    - user2 doesn't have a register method...
    - currently using auto_register, but having a "register" button seems more friendly

- create command line shell using Forms
- create messenger using Forms and Data Transfer Service

Form stuff
----------
- update Form max_rows on area change
    - when more space is available, more rows can be displayed

- mouse click animation looks dark/opaque when clicking on empty space in container with buttons

- refactor text rendering to use an atlas
    - current basic text rendering solution is very inefficient
    - disproportionate amount of time is spent rendering text relative to other draw operations


- Text-to-Speech for tip_bar_text?
- theme_profile ideas/guidelines
    - make interactive components light and non-interactive components dark (or vice versa)
    - make text colors on interactive components different than text colors on non-interactive components
- Sound effects?
    - very subtle/soft sound on_hover/click/etc


-  rounded rectangles
    - sdlgfx functions automatically set blendmode
        - also fails to restore blendmode after setting it
    - will have to use a modified version of sdl2gfx to use rounded rectangles
        - simply remove the SDL_SetRenderDrawBlendMode calls
    - alternatively, replace SDL_Renderer with OpenGL


- Homescreen: Closing Theme_Customizer leaves a dead empty tab open



Make identicons
===============
- use for automatically generated icons, whenever icons are necessary
    - e.g. for programs listed in the Home_Screen
- Color palette: white, black, orange, blue
    - red and green are always kept at equal levels
        - minimize accessibility issues with a common form of color blindness
    - color information provides a maximum of 32 bits of information (for 8-bit rgba)
        - not achieved in practice, because colors that are close to each other are indistinguishable by human eyes
        - increments of 16 appear to be reasonably distinguishable
            - 16 = 2^4 possible values per each rgba color value
            - 2^4 * 2^4 * 2^4 * 2^4 = 16 bits of information are conveyed by color information
- Divide area into NxN grid
    - KxN grid could enable having square/"long"/"tall" icons, another feature enabling identification
    - NxN is simple to identify as an icon, reason about, and implement
        - knowing an icon is a square can help identify it
    - alternative: split grid randomly by bisection

- For each cell in the grid, draw a shape of a given color in the cell
    - Shapes:
        - filled rectangle
        - lines?
            - horizontal, vertical, diagonal, other diagonal
- Try to arrange for some symmetry to be present?

- Use bits of hash value to make decision on what operation to apply to icon area
    - for each 4 bits of hash value,
                                        # bit number
           draw shape/color flag        # 0
           split vertical flag          # 1
           split horizontal flag        # 2
    - if the 0 bit is set, then draw the shape/color to the current area
    - if the 1 bit is set, then the area is divided into two left and right regions

    Define "Symmetry"
    -----------------
    - if pattern a is a translation or rotation of pattern b, then pattern a and b are different representations of the same pattern
    - generate all symmetries for an NxN grid:
        - assume the only possible configuration of a cell is a solid fill of color1 or color2


Shape, Outline color, background color, and shape color
-------------------------------------------------------

- Draw an outline with color w
- Fill the background inside it with color x
- Draw a shape y with color z inside the outlined and filled area

- color can display lots of information
    - 4 bits per color channel rgb: 12-bits of possible colors
    - 3 separate colors can display a maximum of 2 ** (12 * 3) = 2 ** 36
        - Some combinations are not useful, e.g. outline color = background color = shape color
- For shapes:
    - Easy: pick from a selection of the simplest shapes
        - point (circle), line, triangle, square, pentagon, trapezoid, perpendicular lines, parallel lines
            - stop at pentagon, because distinguishing n-gons at a glace quickly becomes impractical
            - could use combinations of shapes
                - e.g. place triangles along the edges of a square

    - Hard?: Geometrical representation of error correcting codes
        - good error correcting codes are maximally different from each other
            - does this apply to their geometrical realization as well?

    - Choice of shape itself does not contribute huge amount of bits to possibility space
        - but the use of the shape enables the use of a third color, which does have a large influence.

Which is more useful:

- Having a small number of features with a huge number of possible states per feature
    - e.g. having only one color that can take 2 ** 12 possible values
    - can technically distinguish 2 ** 12 different states
- Having a large number of features with a smaller amount of possible states per feature
    - having 4 different shapes present where each shape can take on 2 ** 3 possible values
    - can technically distinguish 2 ** (3 * 4) = 2 ** 12 different states
    -

Reformulate the question:

- Is having a (single) feature with a huge number of possible states useful?
    - how many different identifiers should there be in a given subcategory


- use shapes to determine location in a tree of types, and use color to determine the selection within that location of the tree

    shape0     shape1     shape2

    shape3     shape4     shape5

    shape6     shape7     shape8

    The value of shape0 determines a specific category among the broadest possible categories
        - program/data?


What metadata can be defined about something (program/data) in the abstract?

    - Not using concrete details, e.g. a hash of the bits
    - Using abstract details, such as what it is for (e.g. financial accounting application)
        - What abstract details exist?

                - Name
                - Type/purpose
                    - application
                        - system tool
                            - Tools for working with the file system
                            - Tools for working with pride
                            - Tools for working with the OS
                            - Tools for working with the hardware
                        - settings
                        - development/work/productivity
                            - text/document editors
                            - programming IDE
                            - photoshop
                            - audacity
                        - internet
                            - web browser
                            - email
                            - internet messenger (e.g. discord, slack)
                            - applications that depend exclusively or heavily on internet in order to function
                        - media
                            - music player
                            - video player
                            - book reader
                        - game
                            - tactics/strategy
                            - ...
                        - misc
                    - data/file (suggestion: use radius of the polygon/shape to indicate file size)
                        - configuration file
                        - database
                        - movie
                        - music
                        - picture
                        - shell script
                        - source code
                        - misc
                    - shortcuts?
                        - e.g. documents, downloads, etc
                    - user-specified/custom/pinned/starred



- use constants to denote different common h_range/w_range values

    THIN = (0, .10)



Refactor gui package
--------------------
- refactor pride.gui.gui.Window_Object into different objects with separate responsibilities
    - already started in the form of the Organized_Object class
- remove all deprecated and/or unused+untested code



Homescreen
----------
- set up homescreen
- set up application launcher
    - /usr/share/applications/
- set up system shell
- set up python shell
- set up file explorer
    - right click menu should contain open-file-explorer-here-as-root option
- location of tab bar should be customizable

        ---------- tab bar -----------------------------------------------------
        | Menu | open applications | shortcuts | notifications | date/time|    |
        ------------------------------------------------------------------------
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                  application area                                    |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        |                                                                      |
        ------------------------------------------------------------------------


- Menu:

        |--------------------------------------------------------------------|
        |            ?                                   |log out|sleep|power|
        |--------------------------------------------------------------------|
        | links to the      |      shortcuts to      |      shortcuts to     |
        | most frequently   |      most frequently   |      settings         |
        | used programs     |      used data         |                       |
        |                   |                        |                       |
        |                   |                        |                       |
        |                   |                        |                       |
        |                   |                        |                       |
        |--------------------------------------------------------------------|
        | Menu |   open applications | shortcuts | notifications | date/time |
        ---------------------------------------------------------------------|

Security issues
===============

- use a random salt in user2.User.derive_master_keys

Make  `encrypt` use a per-message key
-------------------------------------
- Can use randomly generated nonce with effectively no concerns regarding size and collisions
    - Current behavior uses randomly-generated nonces with GCM mode, which is risky

Ensure cryptogram header is flexible to support updates to algorithms
---------------------------------------------------------------------
- Could be as simple as a unit test for existing code
- Could mean re-writing existing code

Properly define different data types (in transit, at rest, in-program, etc) and how encryption should be used with them
-----------------------------------------------------------------------------------------------------------------------
- Currently, the User component and Encryption_Service can both perform encryption
    - Which one should be used when?
- The File_System component supports encryption
    - When should it be used?

Set up tls properly
-------------------
- Self-signed certificates currently providing little security
- Ensure that the default configuration is secure

deal with certificates properly
-------------------------------
- ...

Have a clearly defined user model
---------------------------------

# begin security system remodel notes

Setup
-----

Generate for the user a random passphrase of sufficient strength.
Generate uniformly random master secret (e.g. via /dev/urandom).
Derive the user_secret (e.g. pbkdf2/bcrypt/scrypt/argon2)
Encrypt the master secret, using the user_secret as the source secret material.
Store the encrypted master secret:

- locally, on the device
- on the internet somewhere
    - Enables access in the event of a missing device or device failure
    - Download the encrypted master_key to the new device
    - The new device is now usable with the same access


Generating the passphrase
-------------------------
- 10 words from a word list with 4096 entries (4096 = 2 ** 12)
- 8 words using 2 ** 20 (1 million) kdf iterations


Deriving the user_secret
------------------------
With a 10-word passphrase, a slow key derivation function should not be necessary.
The advantage is a simpler implementation.

A shorter, 8-word passphrase could be obtained with only 2**20 (1 million) iterations (or equivalent work factor).
The advantage is an improved user experience.
2 ** 30 (1 billion) iterations only shrinks the passphrase by a single word and takes significantly longer.


Encrypting the master secret
----------------------------




(Optional) Backup
-----------------
Store an encrypted copy of master_secret in a persistent public space.
Generate a new identity (e.g. `hkdf(master_secret, info="master")`).

- The `info` string should be fixed to a constant, public value



"Login"
-------
Decrypt the master secret using the passphrase.
    - Authentication success/failure indicates "log-in" success/failure
Derive master encryption key from master secret



Failures
--------

- Device failure (dead, missing, etc)
    - solution: Encrypted backup of master_secret
- Forgotten pass phrase
-

# end of security remodel notes




full screen toggle, resolution sliders
--------------------------------------
- started: windowoptions




optimize render
---------------
- cache every x layers
    - saves multiplicative factor
    - only useful when there are a large number of layers
- cache every x items
    - useful for when a given layer has a large number of items in it, but only a few change at a time

- optimize organizer to use CPU_COUNT processes to do the work
    - could use threads, but python threads make things slower rather than faster
    - could use processes, but then there is no shared state and data needs to be sent back and forth
        - only useful for very large tasks
    - does cython offer a usable and worthwhile threading solution?

- "floating" z cache
- invalidate texture and text separately
    - frequently it will be the case that an items text will change while the rest remains the same
    - could split invalidation into two tiers, one that invalidates everything, and another that redraws only the text



2d slider pad
-------------
- useful for e.g. changing position


Tip Bar
-------
- set timeout on tip bar text?
- implement colors in tip bar text?



indicate unusable buttons as being unusable (e.g. grey-out)
-----------------------------------------------------------
- fade-out effects for hide/show
- hide/show buttons
    - mouseover to left/right/top/bottom to see hide/show buttons


theme designer applet
---------------------
- visual programming app to make designing themes easy


improve auto-documentation (pride.components.package)
-----------------------------------------------------
- how?


add api file + start using versionhelper
----------------------------------------
- separate gui into separate package due to different levels of stability




Ideas
=====

post-initializer inheritance
----------------------------
- append each post-initializer into a list
- call them all in succession


auto remove Base objects from lists (or containers)
---------------------------------------------------
- add_to method that adds a Base object to a list
- #self.append_to(list)
- #   keeps a handle on list
-   on delete, removes `self` from list


Software install module
-----------------------

def install_packages(install_script)
    if pride.components.shell.get_permission(prompt):
        os.system(install_script)

Notes
=====

RPC acted weird on first run, then worked fine?
-----------------------------------------------
- reproducible: ?


Known Issues
============

encryptedstorage does not have OS provided encryption on linux
--------------------------------------------------------------
- there is no equivalent on linux
- just switch providers if using linux
